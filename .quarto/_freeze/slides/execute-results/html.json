{
  "hash": "a241de2ff8c808758b5740994e9554e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducibility, organization, and documentation in R\"\nauthor: \"Eliot Monaco\"\ndate: \"9/9/2024\"\nformat:\n  revealjs:\n    theme: dark\n    highlight-style: github\n    css: styles.css\n    width: 1300\n    slide-number: true\n    incremental: true\n    code-overflow: \"wrap\"\n    preview-links: true\n    scrollable: true\n    chalkboard:\n      buttons: false\n---\n\n\n\n\n\n# What's the problem?\n\n## Time and change\n\n- When we're immersed in an analysis, the methodology is never clearer\n- Then things happen\n- How do we ensure that we, or someone else, can run the analysis and get the same output?\n\n:::{.notes}\nWe go away, things change, we forget. Did we leave the project in a state where it can be easily followed, and the output can be reproduced? Did changes to packages, R, or something else cause any part to break?\n\nReproducibility and documentation are often the last things we're thinking of when we do an analysis.\n:::\n\n## What does it mean to be reproducible?\n\n- **Self-contained**: all in one directory\n- **Portable**: can be moved or copied without breaking it or changing the output\n- **Everything is in code**: the analysis in run from scripts with nothing left out\n- **Everything is automated**: minimal human intervention or decision-making\n- **Clearly ordered**: no ambiguity which parts/which order to run everything\n- **Not dependent on you**: can be executed successfully by someone unfamiliar with the project\n- **Consistent output**: produces the same output regardless of time, place, or person\n\n:::{.notes}\nThis is oriented toward data analysis projects in R.\n\nThings to strive for, can't necessarily do everything perfectly.\n:::\n\n## What do you need for reproducibility?\n\n- Simple, predictable project organization\n- Clear documentation\n- Good habits, especially when beginning and when stepping away from (opening and closing?) a project\n- Collectively, \"housekeeping\"\n\n# Projects & internal structure\n\n## Use RStudio projects\n\n- Created to make R projects easy to organize and reproducible\n- Group all project files in one directory\n- Sets the working directory to the project directory\n- Easily integrate versioning (git/GitHub)\n- Necessary for using renv (package documentation)\n- File > New Project\n\n:::{.notes}\nPlease use projects!\n\nInstead of justifying when to start a project, justify when NOT to. Make starting projects your default.\n\nBetter to have many well-organized, lean projects than fewer bloated projects, in my opinion.\n:::\n\n## Parts of an analysis: Files\n\n::: {.r-fit-text}\n[source data, final data, intermediate data, <br />\nother helpful data,]{.txt-green} [analysis/processing scripts, <br />\ndata viz script, custom function scripts, <br />\nscript to load additional data,]{.txt-blue} [CSV output, <br />\nExcel output, HTML/XML/JSON output, plots, <br />\ntables, maps, reports,]{.txt-red} [Rhistory, RData]{.txt-yellow}\n:::\n\n## File organization {.smaller}\n\n:::{.columns.center}\n::::{.column width=25%}\n::::\n::::{.column width=30%}\n```\n\n\nmy-project/\n|-- .Rhistory\n|-- analysis_script.R\n|-- compare_outputs.R\n|-- data.rds\n|-- data_processing_script.R\n|-- data1.rds\n|-- data2.rds\n|-- df.csv\n|-- df1.rds\n|-- df2.rds\n|-- exploration.R\n|-- notes.txt\n|-- old_script.R\n|-- original_script.R\n|-- process_source_data.R\n|-- report.Rmd\n|-- workspace.RData\n|-- workspace1.RData\n```\n::::\n::::{.column width=30%}\n```\n\n\nmy-project/\n|-- data/\n|   |-- 1-source/\n|   |   |-- data1.rds\n|   |   |-- data2.rds\n|   |-- 2-final/\n|       |-- data_final.rds\n|-- output/\n|   |-- plot1.png\n|   |-- table1.csv\n|   |-- table2.csv\n|-- scripts/\n    |-- 01_data_validation.Rmd\n    |-- 02_data_processing.Rmd\n    |-- 03_data_viz.Rmd\n```\n::::\n:::\n\n:::{.notes}\nWhat order to run scripts? What is the final output? Is the analysis even complete?\n\nBoth might produce the same output, but which would you rather see when you open the project and have to make sense of it (on a deadline)?\n:::\n\n## Good project structure\n\n- Consistent and predictable across similar projects\n- Easily accommodates variation\n- As simple as possible\n\n## Project structure example\n\n:::{.columns}\n::::{.column width=15%}\n::::\n::::{.column width=25%}\n```\n\nmy-project/\n|\n|-- data/\n|   |-- 1-source/\n|   |-- 2-aux/\n|   |-- 3-final/\n|\n|-- output/\n|\n|\n|-- scripts/\n|\n|\n|-- my-project.Rproj\n```\n::::\n::::{.column width=50%}\n```\n\n\n\n\nsource data only (from outside the project)\nintermediate/auxiliary data (everything else)\nfinal data only (the end result(s) of the project)\n\nnon-native data products (for use outside of R)\n - CSV, XLSX, HTML, XML, etc.\n\ncode scripts for analysis, custom functions,\nadditional data, reports, etc.\n\nthe RStudio project file\n```\n::::\n:::\n\n## Let a function do it for you\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_project_dirs <- function(type = c(1, 2), root = getwd()) {\n  if (type == 1) {\n    dirs <- c(\n      \"data\", \"data/1-source\", \"data/2-aux\", \"data/3-final\",\n      \"output\",\n      \"scripts\"\n    )\n  } else if (type == 2) {\n    dirs <- c(\n      \"data\", \"data/1-source\", \"data/2-final\",\n      \"output\",\n      \"scripts\"\n    )\n  } else {\n    stop(\"`type` must be 1 or 2\")\n  }\n\n  dirs <- paste(root, dirs, sep = \"/\")\n\n  lapply(dirs, dir.create)\n\n  invisible(root)\n}\n```\n:::\n\n\n\n# Within projects\n\n## Paths\n\nUse paths that are **relative** and **inward-pointing**\n\n## Relative paths\n\n:::{.nonincremental}\n- RStudio projects set the working directory to the project's main directory by default\n- Leave this alone, and use **relative paths**\n- A relative path uses the working directory as the baseline\n- An absolute path conveys the whole path explicitly\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"data/1-source/data_file.csv\")\n```\n:::\n\n\n\n\"C:/Users/Username/OneDrive/Documents/r_projects_folder/my_project\" is implied in the relative path above\n\n## Inward-pointing paths\n\nWhen you reference a file outside the project, it's no longer self-contained\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is data I really need, but it's not in my project\nother_data <- read.csv(\"../../another_folder/important_data_outside_my_project.csv\")\n```\n:::\n\n\n\n## Why adhere to this?\n\n- Changing the wd can cause confusion (errors?)\n- If a change of wd is not written into the script, it will be difficult to track\n- A change of wd takes the same time as typing a relative path, so...\n- If your project is collaborative, e.g., via GitHub, relative inward-pointing paths are the only way to ensure paths work for everyone\n- If a project is moved, or if files or folders change outside a project, outward-pointing paths will break\n\n## Markdown files\n\n:::{.nonincremental}\n- For markdown files, including Quarto, the wd is the directory the markdown file is saved in.\n- If analysis.Rmd is saved in my_project/scripts/, that is the wd for that file.\n- To import data, I would need to go up a level, as in\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_data <- read.csv(\"../data/1-source/data_file.csv\")\n```\n:::\n\n\n\n```\nmy-project/                         the wd for the project\n|\n|-- data/\n|   |-- 1-source/\n|       |-- data_file.csv\n|\n|-- scripts/                        the wd for the RMD\n        |-- analysis.Rmd\n```\n\n## Scripts\n\n- Number scripts in sequential order of execution\n    + e.g., 01_clean_data.R, 02_analyze_data.R, 03_create_plots.R\n- Write scripts so that they can be executed from top to bottom (no skipping around)\n- If the analysis is interactive, write every step into the code so that when it's finished you can clear your environment, run the whole script at once (Ctrl + Alt + R), and get the same output\n- Include a Purpose section for each script\n\n## Scripts\n\n- Every time an object is brought into the global environment, it's written in code\n    + `readRDS()`, `read.csv()`, etc. for importing data files\n    + `library()`, `p_load()` for attaching packages\n    + `source()` for scripts, e.g., those containing custom functions\n\n## A recommendation\n\nDon't save Rhistory or RData (workspace) files---everything should be possible to recreate from your scripts\n\n:::{width=50%}\n![](images/global_opts1.png){fig-align=\"center\"}\n:::\n\nYou can disable automatically saving these in Tools > Global Options > General\n\n## The code\n\n- Human-readable code\n    + your future self and anyone who has to read your code with thank you\n- Follow style conventions (e.g., [tidyverse](https://style.tidyverse.org/index.html))\n- Use styler from Addins or create an easy keyboard shortcut\n    + Tools > Modify Keyboard Shortcuts\n    + type \"style\" in search\n    + click in the Shortcut field and type the shortcut you want\n- Risk over-commenting\n- RMDs, QMDs, & notebooks combine code, code output, text/narrative, and reports all in one\n\n# The environment\n\n## Parts of an analysis: The environment\n\n- Packages\n    + Base R - attached automatically\n    + Explicitly attached packages\n    + Custom packages\n- R (version)\n- Operating system\n\n## `sessionInfo()`\n\n`sessionInfo()` captures a snapshot of your session\n\n:::{.nonincremental}\n- R version\n- package versions\n- operating system\n- and more\n:::\n\n## `sessionInfo()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.0 (2024-04-24 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8  LC_CTYPE=English_United States.utf8    LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                           LC_TIME=English_United States.utf8    \n\ntime zone: America/Chicago\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] compiler_4.4.0    fastmap_1.2.0     cli_3.6.2         tools_4.4.0       htmltools_0.5.8.1 rstudioapi_0.16.0\n [7] yaml_2.3.8        rmarkdown_2.27    knitr_1.46        jsonlite_1.8.8    xfun_0.44         digest_0.6.35    \n[13] rlang_1.1.3       evaluate_0.23    \n```\n\n\n:::\n:::\n\n\n\n## `sessionInfo()`\n\nYou can print the output directly to a text file\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsink(\"session_info.txt\")\nsessionInfo()\nsink()\n```\n:::\n\n\n\n::: aside\nStolen from <https://www.geeksforgeeks.org/reproducibility-in-r-programming/>\n:::\n\n## renv is your friendv\n\n- renv ensures that the packages used in your project are recorded\n- It can save a library of packages within your project\n- Or it can save a snapshot of the packages in a lockfile, from which you can recreate your project-specific package library\n\n## Set up renv\n\n`renv::init()`\n\n:::{.columns}\n::::{.column width=60%}\n:::::{.nonincremental}\n- Call within a project to start using renv\n- Creates a project-specific package library in renv/\n- Creates a lockfile (renv.lock) that records the project state including packages\n- Creates .Rprofile to make sure renv runs in all future sessions\n:::::\n::::\n::::{.column width=40%}\n![](images/renv1.png)\n::::\n:::\n\n## Update (or record) the project state\n\n`renv::snapshot()`\n\n:::{.nonincremental}\n- Call to update the lockfile if you change something, e.g., attach new packages\n- This can be done anytime after calling `renv::init()`\n- It can also be done without ever calling `renv::init()` (a lightweight option)\n:::\n\n## Restore a project state\n\n`renv::restore()`\n\n:::{.nonincremental}\n- Call to recreate/restore the project-specific library from a lockfile\n- Great when collaborating, e.g., over GitHub, or restoring an archived project\n- This will not restore the R version, just packages\n:::\n\n## More renv\n\n`renv::activate()`\n\n:::{.nonincremental}\n- Call to enable renv (if not already activated)\n- e.g., if only a lockfile exists because `renv::init()` was never called, do this before `renv::restore()`\n:::\n\n. . .\n\n`renv::status()`\n\n:::{.nonincremental}\n- Call to report problems: packages used but not installed, installed but not used, version out of sync\n:::\n\n. . .\n\n`renv::deactivate()`\n\n:::{.nonincremental}\n- Call to deactivate renv\n- arg `clean = TRUE` will remove the library and lockfile\n:::\n\n## The renv workflow\n\n- Option 1: create a project library\n    + Call `renv::init()` at any time\n    + Call `renv::snapshot()` when you're finished\n- Option 2: create a lockfile only\n    + Call `renv::snapshot()` when you're finished\n\n# Outside of R\n\n## What is not reproducible?\n\n...in the sense that you have control over how the data is modified and can replicate it anytime\n\n1. Create a table in R. Export the table to a spreadsheet in Excel. Make manual changes to the Excel document. Import the data back into R.\n2. Process some data in R. Run that data through an app or API outside of your RStudio project. Import the modified data back into R.\n\n## Parts of an analysis: Beyond R\n\nIncludes using:\n\n- APIs\n- Shiny apps\n- Other files and software\n- Or anything outside of R used to modify data\n\n## Handling irreproducibility\n\n- Some things have to happen outside of R!\n- Document with narrative what has happened to the data\n- Save the exported (unmodified) data and imported (modified) data separately\n\n# Do we have time?\n\n## Document custom functions\n\n- Keep custom functions in separate scripts and use `source()`\n- Use package names in function calls if not base R (`package::function()`)\n- Describe the function arguments, expected input and output\n- Comment within the function itself\n- Use roxygen2 style documentation\n\n## When is a project over?\n\n- Resist project bloat\n- Repeated analyses (monthly, quarterly, annually) should each be a new project\n- You can always make the final data of one project the source data of another\n\n## What did I miss?\n\n- Setting a seed for random number generation (see [Geeks for Geeks](https://www.geeksforgeeks.org/reproducibility-in-r-programming/))\n- I avoided talking about version control because that's its own huge topic... tl;dr it's a good idea\n- Tracking custom packages with renv\n\n# Questions/discussion\n\n## Resources\n\n:::{.nonincremental}\n- [R for Data Science: Workflow: scripts and projects](https://r4ds.hadley.nz/workflow-scripts)\n- [The tidyverse style guide](https://style.tidyverse.org/index.html)\n- [The renv package](https://rstudio.github.io/renv/index.html)\n- [Geeks for Geeks: Reproducibility In R Programming](https://www.geeksforgeeks.org/reproducibility-in-r-programming/)\n- R for Epidemiology: [R Projects](https://www.r4epi.com/r-projects) & [Coding Best Practices](https://www.r4epi.com/coding-best-practices)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}